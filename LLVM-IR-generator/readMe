## This compiler compiles c language into LLVM IR
### Baseline requirement:
- Integer type
- Staements for arithmetic computation
- Comparison expression
- if-then/if-then-else program constructs
- printf() function

### Additional supported features:
- For-loop construct
- While-loop construct
- printf() fucntion with arbitrary number of parameters
- For-loop construct + if construct + while-loop construct
- Nested if construct
- Nested for-loop construct
- Nested while construct

### How to compile the LLVM IR　generator?
1. Use provided Makefile:
   $ make
2. Manual compilation:
   $ java -cp antlr-3.5.3-complete-no-st3.jar org.antlr.Tool myCompiler.g && \
   $ javac -cp antlr-3.5.3-complete-no-st3.jar:. *.java 

### How to compile testing c code into LLVM IR?
note: test_case.c is the baseline test file provided on e-course2

$ java -cp antlr-3.5.3-complete-no-st3.jar:. myCompiler_test test1.c >test1.ll
$ java -cp antlr-3.5.3-complete-no-st3.jar:. myCompiler_test test2.c > test2.ll
$ java -cp antlr-3.5.3-complete-no-st3.jar:. myCompiler_test test3.c >test3.ll
$ java -cp antlr-3.5.3-complete-no-st3.jar:. myCompiler_test test_case.c > test_case.ll


### How to interprete the provided LLVM IR ?
note: test_case.ll is the baseline test file provided on e-course2 and compiled into LLVM IR　with myCompiler 

$ lli test1.ll
$ lli test2.ll
$ lli test3.ll
$ lli test_case.ll
