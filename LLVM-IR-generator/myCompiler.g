grammar myCompiler;
/*the file being editted */
options {
   language = Java;
}

@header {
    // import packages here.
    import java.util.HashMap;
    import java.util.ArrayList;
}

@members {
    boolean TRACEON = false;

    // Type information.
    public enum Type{
       ERR, BOOL, INT, FLOAT, CHAR, CONST_INT, STRING;
    }

    // This structure is used to record the information of a variable or a constant.
    class tVar {
	   int   varIndex; // temporary variable's index. Ex: t1, t2, ..., etc.
	   int   iValue;   // value of constant integer. Ex: 123.
	   float fValue;   // value of constant floating point. Ex: 2.314.
      String sValue;
	};

   class Info {
       Type theType;  // type information.
       tVar theVar;
	   
	   Info() {
        theType = Type.ERR;
		  theVar = new tVar();
	   }
    };

	class Params{
      String param_str;
      int literal_ptr;

      Params(){
         param_str = "";
         literal_ptr = 0;
      }

   }
    // ============================================
    // Create a symbol table.
	// ArrayList is easy to extend to add more info. into symbol table.
	//
	// The structure of symbol table:
	// <variable ID, [Type, [varIndex or iValue, or fValue]]>
	//    - type: the variable type   (please check "enum Type")
	//    - varIndex: the variable's index, ex: t1, t2, ...
	//    - iValue: value of integer constant.
	//    - fValue: value of floating-point constant.
    // ============================================

    HashMap<String, Info> symtab = new HashMap<String, Info>();

    // labelCount is used to represent temporary label.
    // The first index is 0.
    int labelCount = 0;
	
    // varCount is used to represent temporary variables.
    // The first index is 0.
    int varCount = 0;

    // Record all assembly instructions.
    List<String> TextCode = new ArrayList<String>();


    /*
     * Output prologue.
     */
    void prologue()
    {
       TextCode.add("; === prologue ====");
       TextCode.add("declare dso_local i32 @printf(i8*, ...)\n");
	   TextCode.add("define dso_local i32 @main()");
	   TextCode.add("{");
    }
    
	
    /*
     * Output epilogue.
     */

    void epilogue()
    {
       /* handle epilogue */
       TextCode.add("\n; === epilogue ===");
	   TextCode.add("ret i32 0");
       TextCode.add("}");
    }
    
    
    /* Generate a new label */
    String newLabel()
    {
       labelCount ++;
       return (new String("L")) + Integer.toString(labelCount);
    } 
    
    /*get the LLMVã€€IR generated by generator */
    public List<String> getTextCode()
    {
       return TextCode;
    }
}

program: (INT|VOID) MAIN '(' ')'
        {
           prologue();
        }

        '{' 
           declarations
           statements
           
         (RETURN Integer_constant ';')?

        '}'
         
        {
           epilogue();
        }
        ;


declarations: type Identifier ';' declarations
        {
           if (TRACEON)
              System.out.println("declarations: type Identifier : declarations");

           if (symtab.containsKey($Identifier.text)) {
              // variable re-declared.
              System.out.println("Type Error: " + 
                                  $Identifier.getLine() + 
                                 ": Redeclared identifier.");
              System.exit(0);
           }
                 
           /* Add ID and its info into the symbol table. */
	       Info the_entry = new Info();
		   the_entry.theType = $type.attr_type;
         
         /*t0, t1, t2 */
		   the_entry.theVar.varIndex = varCount;
		   varCount ++;
		   symtab.put($Identifier.text, the_entry);

           // issue the instruction.
		   // Ex: \%a = alloca i32, align 4
           if ($type.attr_type == Type.INT) { 
              TextCode.add("\%t" + the_entry.theVar.varIndex + " = alloca i32, align 4");
           }
        }
        | 
        {
           if (TRACEON)
              System.out.println("declarations: ");
        }
        ;


type
returns [Type attr_type]
    : INT { if (TRACEON) System.out.println("type: INT"); $attr_type=Type.INT; }
    | CHAR { if (TRACEON) System.out.println("type: CHAR"); $attr_type=Type.CHAR; }
    | FLOAT {if (TRACEON) System.out.println("type: FLOAT"); $attr_type=Type.FLOAT; }
	;


statements:statement statements
          |
          ;


statement: assign_stmt ';'
         | if_stmt
         | func_no_return_stmt ';'
         | for_stmt
         | while_stmt
         ;
while_stmt returns[String label]
         : WHILE 
         '('
            {
               String L_loop = "L" + Integer.toString(labelCount);
               labelCount++;

               String L_end = "L" + Integer.toString(labelCount);
               labelCount++;

               String L_body = "L" + Integer.toString(labelCount);
               labelCount++;
               
               TextCode.add("br label \%" + L_loop);
               TextCode.add(L_loop + ":");
            }
            a=cond_expression
            {
               TextCode.add("br i1 \%t" + $a.theInfo.theVar.varIndex + ", label \%" + L_body + ", label \%" + L_end);
               TextCode.add(L_body + ":");
            }
         ')'
            block_stmt
            {
               TextCode.add("br label \%" + L_loop);
               TextCode.add(L_end + ":");
            }

         ;

for_stmt returns[String label]
         : 
         FOR '(' a=assign_stmt ';'
            {
               String L_loop = "L" + Integer.toString(labelCount);
               labelCount++;

               String L_end = "L" + Integer.toString(labelCount);
               labelCount++;

               String L_body = "L" + Integer.toString(labelCount);
               labelCount++;

               String L_update = "L" + Integer.toString(labelCount);
               labelCount++;
               
               TextCode.add("br label \%" + L_loop);
               TextCode.add(L_loop + ":");
            }
            b=cond_expression ';'
            {
               TextCode.add("br i1 \%t" + $b.theInfo.theVar.varIndex + ", label \%" + L_body + ", label \%" + L_end);
               TextCode.add(L_update + ":");
            }
            c=assign_stmt
            {
               TextCode.add("br label \%" + L_loop);
               TextCode.add(L_body + ":");
            }
            ')'
            
            block_stmt 
            {
               TextCode.add("br label \%" + L_update);
               TextCode.add(L_end + ":");
            }
        ;
		 
		 
if_stmt returns[String label]
   @init{label = new String();}
            : a=if_then_stmt 
            {
              String Lfalse = $if_then_stmt.label;
              
              String Lend = "L" + Integer.toString(labelCount);
              labelCount++;
              $label = Lend;
              
              TextCode.add("br label \%" + Lend);
              TextCode.add(Lfalse + ":");

            }
            b=if_else_stmt[$if_then_stmt.label]
            {  

               TextCode.add("br label \%" + $label);
               TextCode.add($label + ":");
            }
            ;


if_then_stmt returns[String label]
   @init {label = new String();}
            : IF '(' cond_expression ')' 
            {
               String Ltrue = "L" + Integer.toString(labelCount);
               labelCount++;
               String Lfalse = "L" + Integer.toString(labelCount);
               labelCount++;
               
               // add the constant in global scope
               TextCode.add("br i1 \%t" + $cond_expression.theInfo.theVar.varIndex + ", label \%" + Ltrue + ", label \%" + Lfalse);
               
               // this is Ltrue
               TextCode.add(Ltrue + ":");

               $label = Lfalse;
            }
            block_stmt
            ;


if_else_stmt [String label]
            returns [Boolean contain_else]
            : ELSE {$contain_else = true;}
            block_stmt
            | {$contain_else = false;}
            ;

				  
block_stmt: '{' statements '}'
	  ;


assign_stmt: Identifier '=' arith_expression
             {
                Info theRHS = $arith_expression.theInfo;
				   Info theLHS = symtab.get($Identifier.text); 
		   
                if ((theLHS.theType == Type.INT) &&
                    (theRHS.theType == Type.INT)) {		   
                   // issue store insruction.
                   // Ex: store i32 \%tx, i32* \%ty
                   TextCode.add("store i32 \%t" + theRHS.theVar.varIndex + ", i32* \%t" + theLHS.theVar.varIndex);
				} else if ((theLHS.theType == Type.INT) &&
				    (theRHS.theType == Type.CONST_INT)) {
                   // issue store insruction.
                   // Ex: store i32 value, i32* \%ty
                   TextCode.add("store i32 " + theRHS.theVar.iValue + ", i32* \%t" + theLHS.theVar.varIndex);				
				}
			 }
             ;

		   
func_no_return_stmt: 
   'printf' '(' argument')'
   |
   Identifier '(' argument ')'
   ;


argument returns [Params p]
@init{p = new Params();}
   : a=arg
   {  
      //the first argument(basic : string)
      String literal = $a.theInfo.theVar.sValue.replace("\\n", "\n").replace("\\t", "\t").replace("\\r", "\r").replace("\\b", "\b");

      //consider end of line
      int len = literal.length() + 1;
      literal = literal.replace("\n","\\0A").replace("\t", "\\09").replace("\r", "\\0D").replace("\b", "\\08");
       
      TextCode.add(2,"@t"+ varCount + " = private unnamed_addr constant [" + len + " x i8] c\"" + literal + "\\00" + "\"");
      $p.literal_ptr =  varCount;
      varCount++;
   }
   (',' b=arg{
      int argVar = $b.theInfo.theVar.varIndex;
      String s = ", i32 \%t" + argVar;
      $p.param_str += s;
      }
   )*
   { 
      TextCode.add("\%t" + varCount + " = call i32 (i8*, ...) @printf(i8* getelementptr inbounds (["
                  + len + " x i8], [" + len + " x i8]* @t" + $p.literal_ptr + ", i64 0, i64 0)" 
                  + $p.param_str + ")");
      varCount++;
   }
   ;

arg returns[Info theInfo]
   @init{theInfo = new Info();}
   : 
     arith_expression {$theInfo = $arith_expression.theInfo;}
   | STRING_LITERAL{
         $theInfo.theVar.sValue = ($STRING_LITERAL.text).substring(1, $STRING_LITERAL.text.length()-1);
         
         $theInfo.theType = Type.STRING;
   }
   ;
		   
cond_expression returns[Info theInfo]
   @init{theInfo = new Info();}
   : a=arith_expression 
   ('==' b=arith_expression
    {
      if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp eq i32 \%t"+$a.theInfo.theVar.varIndex+", \%t"+$b.theInfo.theVar.varIndex);
      }
      else if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.CONST_INT)) {

         TextCode.add("\%t"+ varCount +" = icmp eq i32 \%t"+$a.theInfo.theVar.varIndex+", "+$b.theInfo.theVar.iValue);
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp eq i32 "+$a.theInfo.theVar.iValue +", \%t"+$b.theInfo.theVar.varIndex);
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.CONST_INT)) {
         TextCode.add("\%t"+ varCount +" = icmp eq i32 "+$a.theInfo.theVar.iValue +", "+$b.theInfo.theVar.iValue);
      }
      $theInfo.theType = Type.INT;
      $theInfo.theVar.varIndex = varCount;
      varCount ++;
   }
   |
   '!=' b=arith_expression
    {
      if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp ne i32 \%t"+$a.theInfo.theVar.varIndex+", \%t"+$b.theInfo.theVar.varIndex);
        
      }
      else if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.CONST_INT)) {

         TextCode.add("\%t"+ varCount +" = icmp ne i32 \%t"+$a.theInfo.theVar.varIndex+", "+$b.theInfo.theVar.iValue);
      
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp ne i32 "+$a.theInfo.theVar.iValue +", \%t"+$b.theInfo.theVar.varIndex);
      
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.CONST_INT)) {
         TextCode.add("\%t"+ varCount +" = icmp ne i32 "+$a.theInfo.theVar.iValue +", "+$b.theInfo.theVar.iValue);
      }
      $theInfo.theType = Type.INT;
      $theInfo.theVar.varIndex = varCount;
      varCount ++;
   }
   |
   '<' b=arith_expression
   {
      if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp slt i32 \%t"+$a.theInfo.theVar.varIndex+", \%t"+$b.theInfo.theVar.varIndex);
        
      }
      else if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.CONST_INT)) {

         TextCode.add("\%t"+ varCount +" = icmp slt i32 \%t"+$a.theInfo.theVar.varIndex+", "+$b.theInfo.theVar.iValue);
      
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp slt i32 "+$a.theInfo.theVar.iValue +", \%t"+$b.theInfo.theVar.varIndex);
      
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.CONST_INT)) {
         TextCode.add("\%t"+ varCount +" = icmp slt i32 "+$a.theInfo.theVar.iValue +", "+$b.theInfo.theVar.iValue);
      }
      $theInfo.theType = Type.INT;
      $theInfo.theVar.varIndex = varCount;
      varCount ++;
   }
   |
   '<=' b=arith_expression
   {
      if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp sle i32 \%t"+$a.theInfo.theVar.varIndex+", \%t"+$b.theInfo.theVar.varIndex);
        
      }
      else if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.CONST_INT)) {

         TextCode.add("\%t"+ varCount +" = icmp sle i32 \%t"+$a.theInfo.theVar.varIndex+", "+$b.theInfo.theVar.iValue);
      
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp sle i32 "+$a.theInfo.theVar.iValue +", \%t"+$b.theInfo.theVar.varIndex);
      
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.CONST_INT)) {
         TextCode.add("\%t"+ varCount +" = icmp sle i32 "+$a.theInfo.theVar.iValue +", "+$b.theInfo.theVar.iValue);
      }
      $theInfo.theType = Type.INT;
      $theInfo.theVar.varIndex = varCount;
      varCount ++;
   }
   |
   '>' b=arith_expression
   {
      if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp sgt i32 \%t"+$a.theInfo.theVar.varIndex+", \%t"+$b.theInfo.theVar.varIndex);
        
      }
      else if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.CONST_INT)) {

         TextCode.add("\%t"+ varCount +" = icmp sgt i32 \%t"+$a.theInfo.theVar.varIndex+", "+$b.theInfo.theVar.iValue);
      
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp sgt i32 "+$a.theInfo.theVar.iValue +", \%t"+$b.theInfo.theVar.varIndex);
      
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.CONST_INT)) {
         TextCode.add("\%t"+ varCount +" = icmp sgt i32 "+$a.theInfo.theVar.iValue +", "+$b.theInfo.theVar.iValue);
      }
      $theInfo.theType = Type.INT;
      $theInfo.theVar.varIndex = varCount;
      varCount ++;
   }
   | 
   '>=' b=arith_expression
   {
      if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp sge i32 \%t"+$a.theInfo.theVar.varIndex+", \%t"+$b.theInfo.theVar.varIndex);
        
      }
      else if (($a.theInfo.theType == Type.INT) && ($b.theInfo.theType == Type.CONST_INT)) {

         TextCode.add("\%t"+ varCount +" = icmp sge i32 \%t"+$a.theInfo.theVar.varIndex+", "+$b.theInfo.theVar.iValue);
      
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.INT)) {
         TextCode.add("\%t"+ varCount +" = icmp sge i32 "+$a.theInfo.theVar.iValue +", \%t"+$b.theInfo.theVar.varIndex);
      
      }
      else if (($a.theInfo.theType == Type.CONST_INT) && ($b.theInfo.theType == Type.CONST_INT)) {
         TextCode.add("\%t"+ varCount +" = icmp sge i32 "+$a.theInfo.theVar.iValue +", "+$b.theInfo.theVar.iValue);
      }
      $theInfo.theType = Type.INT;
      $theInfo.theVar.varIndex = varCount;
      varCount ++;
   }      
   )          
   ;
			   
arith_expression
returns [Info theInfo]
@init {theInfo = new Info();}
                : a=multExpr { $theInfo=$a.theInfo; }
                 ( '+' b=multExpr
                    {
                       // code generation.					   
                       // INT + INT
                       if (($a.theInfo.theType == Type.INT) &&
                           ($b.theInfo.theType == Type.INT)) {
                           
                           TextCode.add("\%t" + varCount + " = add nsw i32 \%t" + $theInfo.theVar.varIndex + ", \%t" + $b.theInfo.theVar.varIndex);
                       } 
                       // INT + constant
                       else if (($a.theInfo.theType == Type.INT) &&
					       ($b.theInfo.theType == Type.CONST_INT)) {
                           TextCode.add("\%t" + varCount + " = add nsw i32 \%t" + $theInfo.theVar.varIndex + ", " + $b.theInfo.theVar.iValue);
                       }

                       // constant + const
                        else if (($a.theInfo.theType == Type.CONST_INT) &&
					       ($b.theInfo.theType == Type.CONST_INT)) {
                           TextCode.add("\%t" + varCount + " = add nsw i32 " + $theInfo.theVar.iValue + ", " + $b.theInfo.theVar.iValue);
                    }
                    // const + int
                        else if (($a.theInfo.theType == Type.CONST_INT) &&
					       ($b.theInfo.theType == Type.INT)) {
                           TextCode.add("\%t" + varCount + " = add nsw i32 " + $theInfo.theVar.iValue + ", \%t" + $b.theInfo.theVar.varIndex);
					       
                    }
                      $theInfo.theType = Type.INT;
					       $theInfo.theVar.varIndex = varCount;
					       varCount ++;
                    }
                 | '-' c=multExpr {
                       // code generation.
                       // INT - int					   
                       if (($a.theInfo.theType == Type.INT) &&
                           ($c.theInfo.theType == Type.INT)) {
                           TextCode.add("\%t" + varCount + " = sub i32 \%t" + $theInfo.theVar.varIndex + ", \%t" + $c.theInfo.theVar.varIndex);
				 
                       } 
                       // int - const
                       else if (($a.theInfo.theType == Type.INT) &&
					       ($c.theInfo.theType == Type.CONST_INT)) {
                           TextCode.add("\%t" + varCount + " = sub i32 \%t" + $theInfo.theVar.varIndex + ", " + $c.theInfo.theVar.iValue);
                       }

                        // const - const
                       else if (($a.theInfo.theType == Type.CONST_INT) &&
					       ($c.theInfo.theType == Type.CONST_INT)) {
                           TextCode.add("\%t" + varCount + " = sub i32 " + $theInfo.theVar.iValue + ", " + $c.theInfo.theVar.iValue);  
                       }

                       // const - INT
                        else if (($a.theInfo.theType == Type.CONST_INT) &&
					       ($c.theInfo.theType == Type.INT)) {
                           TextCode.add("\%t" + varCount + " = sub i32 " + $theInfo.theVar.iValue + ", \%t" + $c.theInfo.theVar.varIndex);
                       }
					       $theInfo.theType = Type.INT;
					       $theInfo.theVar.varIndex = varCount;
					       varCount ++;
                    }
                 )*
                 ;

multExpr
returns [Info theInfo]
@init {theInfo = new Info();}
          : a=signExpr { $theInfo=$a.theInfo; }
          ( '*' b=signExpr {
                       // code generation.					   
                       if (($a.theInfo.theType == Type.INT) &&
                           ($b.theInfo.theType == Type.INT)) {             
                           TextCode.add("\%t" + varCount + " = mul nsw i32 \%t" + $theInfo.theVar.varIndex + ", \%t" + $b.theInfo.theVar.varIndex);
                       } 
                       else if (($a.theInfo.theType == Type.INT) &&
					       ($b.theInfo.theType == Type.CONST_INT)) {
                           TextCode.add("\%t" + varCount + " = mul nsw i32 \%t" + $theInfo.theVar.varIndex + ", " + $b.theInfo.theVar.iValue);
                       }
                     // constant * const
                      else if (($a.theInfo.theType == Type.CONST_INT) &&
					       ($b.theInfo.theType == Type.CONST_INT)) {
                           TextCode.add("\%t" + varCount + " = mul nsw i32 " + $theInfo.theVar.iValue + ", " + $b.theInfo.theVar.iValue);
				       
                    }
                    // const * int
                     else if (($a.theInfo.theType == Type.CONST_INT) &&
					       ($b.theInfo.theType == Type.INT)) {
                           TextCode.add("\%t" + varCount + " = mul nsw i32 " + $theInfo.theVar.iValue + ", \%t" + $b.theInfo.theVar.varIndex);
					       
                    }
                     $theInfo.theType = Type.INT;
					      $theInfo.theVar.varIndex = varCount;
					      varCount ++;
                    }
          | '/' c=signExpr {
                       // code generation.					   
                       if (($a.theInfo.theType == Type.INT) &&
                           ($c.theInfo.theType == Type.INT)) {
                           TextCode.add("\%t" + varCount + " = sdiv i32 \%t" + $theInfo.theVar.varIndex + ", \%t" + $c.theInfo.theVar.varIndex);
					
                       } 
                       else if (($a.theInfo.theType == Type.INT) &&
					       ($c.theInfo.theType == Type.CONST_INT)) {
                           TextCode.add("\%t" + varCount + " = sdiv i32 \%t" + $theInfo.theVar.varIndex + ", " + $c.theInfo.theVar.iValue);
                       }
                        // const / const
                       else if (($a.theInfo.theType == Type.CONST_INT) &&
					       ($c.theInfo.theType == Type.CONST_INT)) {
                           TextCode.add("\%t" + varCount + " = sdiv i32 " + $theInfo.theVar.iValue + ", " + $c.theInfo.theVar.iValue);  
                       }

                       // const / INT
                        else if (($a.theInfo.theType == Type.CONST_INT) &&
					       ($c.theInfo.theType == Type.INT)) {
                           TextCode.add("\%t" + varCount + " = sdiv i32 " + $theInfo.theVar.iValue + ", \%t" + $c.theInfo.theVar.varIndex);
                       }
					       $theInfo.theType = Type.INT;
					       $theInfo.theVar.varIndex = varCount;
					       varCount ++;
                    }
	  )*
	  ;

signExpr
returns [Info theInfo]
@init {theInfo = new Info();}
        : a=primaryExpr { $theInfo=$a.theInfo; } 
        | '-' b=primaryExpr{ 
            if($b.theInfo.theType == Type.CONST_INT){ 
               TextCode.add("\%t" + varCount + " = sub 0" + ", " + $b.theInfo.theVar.iValue );
            }
            else if($b.theInfo.theType == Type.INT){ 
               TextCode.add("\%t" + varCount + " = sub 0" + ", " + $b.theInfo.theVar.varIndex );
            }
        }
	;
		  
primaryExpr
returns [Info theInfo]
@init {theInfo = new Info();}
           : Integer_constant
	         {
            $theInfo.theType = Type.CONST_INT;
			   $theInfo.theVar.iValue = Integer.parseInt($Integer_constant.text);
            }
           | Floating_point_constant
           | Identifier
              {
                // get type information from symtab.
                Type the_type = symtab.get($Identifier.text).theType;
				$theInfo.theType = the_type;

                // get variable index from symtab.
                int vIndex = symtab.get($Identifier.text).theVar.varIndex;
				
                switch (the_type) {
                case INT: 
                         // get a new temporary variable and
						 // load the variable into the temporary variable.
                         
						 // Ex: \%tx = load i32, i32* \%ty.
						 TextCode.add("\%t" + varCount + " = load i32, i32* \%t" + vIndex);
				         
						 // Now, Identifier's value is at the temporary variable \%t[varCount].
						 // Therefore, update it.
						 $theInfo.theVar.varIndex = varCount;
						 varCount ++;
                         break;
                case FLOAT:
                         break;
                case CHAR:
                         break;
			
                }
              }
        
	   | '(' arith_expression {$theInfo = $arith_expression.theInfo;} ')'
           ;

		   
/* description of the tokens */
FLOAT:'float';
INT:'int';
CHAR: 'char';

MAIN: 'main';
VOID: 'void';
IF: 'if';
ELSE: 'else';
FOR: 'for';
RETURN: 'return';
WHILE: 'while';

// RelationOP: '>' |'>=' | '<' | '<=' | '==' | '!=';

Identifier:('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
Integer_constant:'0'..'9'+;
Floating_point_constant:'0'..'9'+ '.' '0'..'9'+;

STRING_LITERAL 
    :  '"' ( EscapeSequence | ~('\\'|'"') )* '"'
   
    ;

WS:( ' ' | '\t' | '\r' | '\n' ) {$channel=HIDDEN;};
SINGLE_LINE_COMM : '//' (.)* '\n'{skip();};
MULTI_LINE_COMM: '/*'(options{greedy=false;}: .)* '*/'{skip();};


EscapeSequence
    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
    ;